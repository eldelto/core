( TODO:
	- [ ] Think about implementing conditionals in terms of
	  'jmp' & 'cjmp' directly
	- [ ] Make most machine words immediate words?
	- [ ] Port VM to Javascript
	- [ ] Strings
	- [ ] Arrays
)


( int -- )
( Displays the last n bytes of memory. )
: mem-tail here @ swap - here @ mem-view ;

( int -- )
( Takes the number from stack and appends it as 'const <int>' to
  the dictionary. )
: literal immediate 'const' b, , ;

( -- addr )
( Returns the codeword pointer of the next word from the input
stream. )
: ' word drop find codeword ;

( -- )
( While compiling, compiles the next word even though it is an
immediate word. )
: [compile] immediate 'call' b, ' , ;

( -- )
( Compiles the codeword pointer of the following word into the current
definition. )
: ref immediate ' [compile] literal ;

( addr -- )
( Compiles a call to the given address into the currently compiled
definition. )
: postpone 'call' b, , ;

( -- int )
( Compiles a 'cbranch' call with a dummy offset of 0 into the
currently compiled definition. Leaves the current memory offset on the
stack. )
: if immediate
  here @
  0 [compile] literal
  ref swap postpone
  ref cbranch postpone
;

( int -- )
( Retroactively fills the 'cbranch' offset of a previous 'if' call to
complete the branching construct. )
: then immediate
  dup here @ swap - 15 - swap 1 + !
;

( int -- int )
( Slightly modified combination of 'then' and 'if'. It sets the branch
offset of the 'if' call in a way so it lands just after the 'cbranch'
of 'else' and therefore executes it. )
: else immediate
  dup here @ swap - 5 + swap 1 + !
  ref false postpone [compile] if
;

( -- )
( Jumps to the beginning of the current word. )
: recurse immediate
  true [compile] literal
  'jmp' b,
  latest @ codeword ,
;

( -- )
( Inserts a 'ret' instruction into the currently compiled
definition. )
: return immediate 'ret' b, ;

( address max counter -- address max counter )
: _times-loop
  dup 1 < if
	return
  then

  rput
  over scall
  rpop 1-
  recurse
;

( address max -- )
( Executes the given word n times. )
: times dup _times-loop drop drop drop ;

( accumulator int -- result )
: _factorial
  dup 0 = over 1 = |
  if return then
  swap over *
  swap 1-
  recurse
;

( int -- result )
( Calculates the factorial of the given number. )
: factorial 1 swap _factorial drop ;
